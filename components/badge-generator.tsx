"use client";

import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
	Card,
	CardContent,
	CardDescription,
	CardHeader,
	CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { base64DevinIcon } from "@/lib/deepwiki";
import { checkIfRepositoryExists } from "@/lib/github";
import { atom, useAtomValue, useSetAtom } from "jotai";
import { GithubIcon, LoaderIcon } from "lucide-react";
import { Suspense, use, useState } from "react";
import { CopyCheckIconHTML, CopyCheckIconMarkdown, useCopy } from "./copy";

const ownerAtom = atom<string>("");
const repoAtom = atom<string>("");

/**
 * underscore to double underscore
 * dash to doubledash
 */
const convertText = (text: string) => {
	return text.replace(/_/g, "__").replace(/-/g, "--");
};

type BadgePresentationProps = {
	owner: string;
	repo: string;
};
function BadgePresentation({ owner, repo }: BadgePresentationProps) {
	const { copyToClipboard } = useCopy();

	const badgeUrl = `https://img.shields.io/badge/DeepWiki-${convertText(owner ?? "owner")}%2F${convertText(repo ?? "repo")}-blue.svg?logo=${base64DevinIcon()}`;
	const deepWikiUrl = `https://deepwiki.com/${owner}/${repo}`;

	const markdownCode = `[![DeepWiki](${badgeUrl})](${deepWikiUrl})`;
	const htmlCode = `<a href="${deepWikiUrl}"><img src="${badgeUrl}" alt="DeepWiki"></a>`;

	const creditComment =
		"<!-- DeepWiki badge generated by https://deepwiki.ryoppippi.com/ -->";

	return (
		<div className="space-y-4">
			<div className="flex items-center justify-center py-4">
				<Badge variant="outline" className="text-base py-1 px-3">
					<a href={deepWikiUrl} target="_blank" rel="noopener noreferrer">
						<img src={badgeUrl || "/placeholder.svg"} alt="DeepWiki Badge" />
					</a>
				</Badge>
			</div>

			<Separator />

			<div className="space-y-2">
				<h3 className="text-sm font-medium">Embed this badge in your README</h3>

				<Tabs defaultValue="markdown" className="w-full">
					<TabsList className="grid w-full grid-cols-2">
						<TabsTrigger value="markdown">Markdown</TabsTrigger>
						<TabsTrigger value="html">HTML</TabsTrigger>
					</TabsList>
					<TabsContent value="markdown" className="space-y-2">
						<div className="relative">
							<pre className="bg-muted p-4 rounded-md overflow-x-auto text-sm">
								<code>{markdownCode}</code>
							</pre>
							<Button
								size="sm"
								variant="ghost"
								className="absolute top-2 right-2"
								onClick={() =>
									copyToClipboard(
										`${markdownCode}\n${creditComment}`,
										"markdown",
									)
								}
							>
								<CopyCheckIconMarkdown />
							</Button>
						</div>
					</TabsContent>
					<TabsContent value="html" className="space-y-2">
						<div className="relative">
							<pre className="bg-muted p-4 rounded-md overflow-x-auto text-sm">
								<code>{htmlCode}</code>
							</pre>
							<Button
								size="sm"
								variant="ghost"
								className="absolute top-2 right-2"
								onClick={() =>
									copyToClipboard(`${htmlCode}\n${creditComment}`, "html")
								}
							>
								<CopyCheckIconHTML />
							</Button>
						</div>
					</TabsContent>
				</Tabs>
			</div>
		</div>
	);
}

function BadgeNotFound() {
	return (
		<div className="text-center p-4 border rounded-md bg-muted">
			<p className="text-destructive font-medium">
				Repository not found or private
			</p>
			<p className="text-sm text-muted-foreground mt-1">
				Make sure the repository is public and exists on DeepWiki.
			</p>
		</div>
	);
}

type BadgeViewProps = {
	checkIfRepositoryExistsPromise:
		| ReturnType<typeof checkIfRepositoryExists>
		| Promise<null>;
};

function BadgeView({ checkIfRepositoryExistsPromise }: BadgeViewProps) {
	const res = use(checkIfRepositoryExistsPromise);

	if (res == null) {
		return;
	}

	if (res.isErr()) {
		return <BadgeNotFound />;
	}

	const { owner, repo } = res.value;
	return <BadgePresentation owner={owner} repo={repo} />;
}

function Header() {
	return (
		<CardHeader>
			<CardTitle>Generate Your Badge</CardTitle>
			<CardDescription>
				Generate badges from your GitHub repositories
			</CardDescription>
		</CardHeader>
	);
}

function URLInput() {
	const setOwner = useSetAtom(ownerAtom);
	const setRepo = useSetAtom(repoAtom);
	const [urlError, setUrlError] = useState<string | null>(null);

	const parseGitHubUrl = (url: string) => {
		try {
			// Reset error state
			setUrlError(null);

			// Handle empty input
			if (!url.trim()) {
				setOwner("");
				setRepo("");
				return;
			}

			// Check if it's a GitHub URL
			if (url.includes("github.com")) {
				// Try to parse the URL
				const githubRegex = /github\.com\/([^/]+)\/([^/]+)/;
				const match = url.match(githubRegex);

				if (match && match.length >= 3) {
					const extractedOwner = match[1];
					// Remove any trailing parts like /tree/main, /issues, etc.
					const extractedRepo = match[2].split("/")[0];

					setOwner(extractedOwner);
					setRepo(extractedRepo);
				} else {
					setUrlError("Invalid GitHub repository URL format");
					setOwner("");
					setRepo("");
				}
			} else {
				// If it's not a GitHub URL, check if it's in the format "owner/repo"
				const simpleRegex = /^([^/]+)\/([^/]+)$/;
				const simpleMatch = url.trim().match(simpleRegex);

				if (simpleMatch && simpleMatch.length >= 3) {
					setOwner(simpleMatch[1]);
					setRepo(simpleMatch[2]);
				} else {
					// Not a GitHub URL or owner/repo format
					setUrlError(
						"Please enter a valid GitHub URL (e.g., https://github.com/owner/repo)",
					);
					setOwner("");
					setRepo("");
				}
			}
		} catch (error) {
			console.error("Error parsing GitHub URL:", error);
			setUrlError("Error parsing URL");
		}
	};

	return (
		<div>
			<label htmlFor="repoUrl" className="text-sm font-medium">
				GitHub Repository URL
			</label>
			<div className="flex items-center space-x-2">
				<GithubIcon className="size-4 text-muted-foreground" />
				<Input
					id="repoUrl"
					placeholder="https://github.com/owner/repo"
					onChange={(e) => parseGitHubUrl(e.target.value)}
					className={
						urlError ? "border-red-500 focus-visible:ring-red-500" : ""
					}
				/>
			</div>
			{urlError && <p className="text-sm text-red-500 mt-1">{urlError}</p>}
		</div>
	);
}

function ButtonLoading() {
	return (
		<Button disabled className="w-full">
			<LoaderIcon className="mr-2 size-4 animate-spin" />
			Checking Repository
		</Button>
	);
}

type ButtonContentProps = {
	promise: Promise<unknown>;
	onClick: () => void;
	disabled: boolean;
};
function ButtonContent(props: ButtonContentProps) {
	use(props.promise);
	return (
		<Button
			onClick={props.onClick}
			disabled={props.disabled}
			className="w-full"
		>
			Generate Badge from URL
		</Button>
	);
}

type ButtonProps = ButtonContentProps & {};
function BadgegenarateButton(props: ButtonProps) {
	return (
		<Suspense fallback={<ButtonLoading />}>
			<ButtonContent {...props} />
		</Suspense>
	);
}

type BadgeDetectedProps = {
	owner: string;
	repo: string;
};
function BadgeDetected({ owner, repo }: BadgeDetectedProps) {
	if (!owner || !repo) {
		return null;
	}

	return (
		<div className="mt-2 flex items-center space-x-2">
			<span className="text-sm text-muted-foreground">Detected:</span>
			<Badge variant="outline" className="font-mono">
				{owner}/{repo}
			</Badge>
		</div>
	);
}

export function BadgeGenerator() {
	const owner = useAtomValue(ownerAtom);
	const repo = useAtomValue(repoAtom);
	const [checkIfRepositoryExistsPromise, setCheckIfRepositoryExistsPromise] =
		useState<ReturnType<typeof checkIfRepositoryExists> | Promise<null>>(
			Promise.resolve(null),
		);

	return (
		<Card className="w-full">
			<Header />
			<CardContent className="space-y-6">
				<div className="space-y-2">
					<URLInput />
				</div>

				<BadgeDetected owner={owner} repo={repo} />

				<BadgegenarateButton
					promise={checkIfRepositoryExistsPromise}
					onClick={() => {
						setCheckIfRepositoryExistsPromise(
							checkIfRepositoryExists({ owner, repo }),
						);
					}}
					disabled={!owner && !repo}
				/>

				<Suspense>
					<BadgeView
						checkIfRepositoryExistsPromise={checkIfRepositoryExistsPromise}
					/>
				</Suspense>
			</CardContent>
		</Card>
	);
}
